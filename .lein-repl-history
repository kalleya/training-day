(+ 1 2)
(+ 3 4) ;=> 7
((fn [who] (str "Hello, " who "!")) "Jani") ;=> "Hello, Jani!"
((fn [who] (str "Hello, " who "!")) "Jani") ;=> "Hello, Kalle!"
((fn [who] (str "Hello, " who "!")) "Kalle") ;=> "Hello, Kalle!"
(def hello (fn [who] (str "Hello, " who "!")))
(hello "beautiful")
(def answer (fn (str "42")))
(def answer (str "42"))
(answer)
(def answer (str "42"))
answer
(use 'training-day)
(def square (fn [a] (* a a)))
(def square (fn [a] (num * a a)))
(def square2 (fn [a] (num * a a)))
(def squareh (fn [a] (num * a a)))
(defn square (fn [a] (num * a a)))
(defn square [x] ":(")
(defn square [x] "* x 2")
(square 5)
(defn square [x] (* x 2))
(square 5)
(defn square [x] (* x x))
(square 5)
(square 2)
(square 3)
(defn average [a b] (/ 2 (+ a b)))
(average 7)
(average 3 4)
(average 2 4)
(- 2 (* 78 35))
(/ 2 (+ 2 4))
(/ 2 (6))
(+ 2 4 (/ 2))
(+ 2 4 (- 3))
(+ 2 4 (- 5))
(+ 2 7 (- 5))
(+ 2 7 (* 5))
(+ 2 7 * 5)
(+ 2 7 (* 5))
(+ 2 7 (* 5 1))
(+ 2 7 (* 1 5))
(+ 2 7 (* 5 5))
(+ 2 7 (/ 2 2))
(+ 2 7 (/ 1 2))
(+ 2 7 (/ 2 1))
(+ 3 7 (/ 2 1))
(+ 3 7 (/ 1 2))
(/ 1 2)
(+ 3 1 (/ 1 2))
(+ 3 1 & (/ 1 2))
(+ 3 1 (/ 1 2))
(* 78 35))
(* 78 35)
(- 2 (* 78 35))
(+ 3 1 (* 0.5))
(* 0.5(+ 2 2))
(* 0.5 (+ 3 3))
(* 0.5 (+ 2 4))
(* 1/2 (+ 2 4))
(* .5 (+ 2 4))
(average (+ 2 4))
(/ 12 3)
(/ 13 3)
(/ 10 3)
(/ 9 3)
(/ 2 3)
(/ 2 (+ 2 2))
(/ 2 (+ 5 5))
